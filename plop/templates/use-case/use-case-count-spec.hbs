import { async } from 'rxjs/internal/scheduler/async';
import { queue } from 'rxjs/internal/scheduler/queue';
import { apply } from '../../../../src/utils/common';
import mock{{repositoryClass}}, {
  mockCount{{pluralEntity}},
} from '../../../../__mocks__/{{#if repositoryModule}}{{repositoryModule}}/{{/if}}{{repositoryClass}}';
import Count{{pluralEntity}} from '../../../../src/domain/use-cases/{{module}}/Count{{pluralEntity}}';
import {{entity}} from '../../../../src/domain/entities/{{module}}/{{entity}}';
import { DEFAULT_FIND_OPTIONS } from '../../../../__mocks__/constant';

describe('Count{{pluralEntity}} UseCase', () => {
  beforeEach(() => {
    mock{{repositoryClass}}.mockClear();
    mockCount{{pluralEntity}}.mockClear();
  });

  test('Count{{pluralEntity}} is called', async() => {
    const repository = new mock{{repositoryClass}}();
    const useCase: Count{{pluralEntity}} = new Count{{pluralEntity}}(repository);

    const result: number = await apply(useCase, (it: Count{{pluralEntity}}) => it.options = DEFAULT_FIND_OPTIONS)
      .runOnce(async, queue)
      .toPromise();
    expect(mockCount{{pluralEntity}}).toHaveBeenCalledTimes(1);
    expect(mockCount{{pluralEntity}}).toBeCalledWith(DEFAULT_FIND_OPTIONS);
    expect(result).toBe(1);
  });
});
