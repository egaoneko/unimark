import { async } from 'rxjs/internal/scheduler/async';
import { queue } from 'rxjs/internal/scheduler/queue';
import { apply } from '../../../../src/utils/common';
import mock{{repositoryClass}}, {
  mockFind{{pluralEntity}}By,
} from '../../../../__mocks__/{{#if repositoryModule}}{{repositoryModule}}/{{/if}}{{repositoryClass}}';
import Find{{pluralEntity}}By from '../../../../src/domain/use-cases/{{module}}/Find{{pluralEntity}}By';
import {{entity}} from '../../../../src/domain/entities/{{module}}/{{entity}}';
import { DEFAULT_FIND_OPTIONS } from '../../../../__mocks__/constant';

describe('Find{{pluralEntity}}By UseCase', () => {
  beforeEach(() => {
    mock{{repositoryClass}}.mockClear();
    mockFind{{pluralEntity}}By.mockClear();
  });

  test('Find{{pluralEntity}}By is called', async() => {
    const repository = new mock{{repositoryClass}}();
    const useCase: Find{{pluralEntity}}By = new Find{{pluralEntity}}By(repository);

    const results: {{entity}}[] = await apply(useCase, (it: Find{{pluralEntity}}By) => it.options = DEFAULT_FIND_OPTIONS)
      .runOnce(async, queue)
      .toPromise();
    expect(mockFind{{pluralEntity}}By).toHaveBeenCalledTimes(1);
    expect(mockFind{{pluralEntity}}By).toBeCalledWith(DEFAULT_FIND_OPTIONS);
    expect(results.length).toBe(1);
  });
});
